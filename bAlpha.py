# gotta import the stuff you know

from tkinter.filedialog import *
from tkinter import messagebox
from openpyxl import load_workbook
import openpyxl
import tkinter as tk


# TK is the GUI window


root = Tk()
root.geometry('200x200')


# "today's file is the file you get from the website
def open_fileNew():
    global wb
    global ws1
    file1 = askopenfile(mode ='r', filetypes =[('Excel Files', '*.xlsx *.xlsm *.sxc *.ods *.csv *.tsv')]) # To open the file that you want. 
    wb = load_workbook(filename = file1.name) # Load into openpyxl
    ws1 = wb.active


# "Yesterday's" file
def open_Master():
    global wb2
    global ws2
    file2 = askopenfile(mode ='r', filetypes =[('Excel Files', '*.xlsx *.xlsm *.sxc *.ods *.csv *.tsv')]) # To open the file that you want. 
    wb2 = load_workbook(filename = file2.name) # Load into openpyxl
    ws2 = wb2.active

# Save wb2 to a new file

def save_fileNew():
    NewFile = asksaveasfilename(defaultextension=".xlsx", filetypes=(("Excel File", ".xlsx"),("All Files", ".*") ))
    wb2.save(NewFile)

''' This part prepares the new data for copying to the old file
delcolumn deletes the extra columns
    hardcoded, intend to allow users to choose which columns to delete out of the titles in row 9
modtitle handles unmerging the Header (first 4 rows) because we can't delete column 1 when these are merged
    moves the whole header 1 column to the right, so that we can delete the very first column
    
FindEntryMaster looks at the first review entry in the Master's file
FindEntryNew checks which row in New matches the first entry in Master, and assigns that generator to abcd

InsertRow inserts a number of rows into Master based on the count generated by FindEntryNew


'''
def delcolumn():
    ws1.delete_cols(39)
    ws1.delete_cols(37)
    ws1.delete_cols(36)
    ws1.delete_cols(34)
    ws1.delete_cols(24, 10)
    ws1.delete_cols(20, 3)
    ws1.delete_cols(18)
    ws1.delete_cols(16)
    ws1.delete_cols(14)
    ws1.delete_cols(11, 2)
    ws1.delete_cols(10)
    ws1.delete_cols(2, 2)
    modtitle()
    
def modtitle():
    ws1.unmerge_cells('A1:C1')
    ws1.unmerge_cells('A2:C2')
    ws1.unmerge_cells('A3:C3')
    ws1.unmerge_cells('A4:C4')
    ws1.move_range('A1:A4', cols = 1)
    ws1.delete_cols(1)
    print('done')
    FirstEntryMaster()


def FirstEntryMaster():
    global row2
    for row2 in ws2.iter_rows(min_row=9, max_row=9, max_col=12, values_only=True):
        break
    print('done1')
    FirstEntryNew()

def FirstEntryNew():
    global count
    global row1
    global abcd
    for count, row1 in enumerate(ws1.iter_rows(min_row=9, max_col=12, values_only=True)):
        print(count, row1)
        if row1 == row2:
                break
    abcd = list(ws1.iter_rows(min_row=9, max_row=count+8, max_col=12, values_only = True))
    insert_row()

def insert_row():
    ws2.insert_rows(9, amount=count)
    CopyRows()

def CopyRows():
    for i in range(9, count+9):
        for j in range(0, 12):
            ws2.cell(row=i,column=j+1).value = abcd[i-9][j]

def testing():
    for testt in ws2.iter_rows(min_row=9, max_row=13, max_col=12, values_only=True):
        break
    print(testt)

btn1 = Button(root, text ='New File', command = open_fileNew)
btn1.pack(side='top')
btn2 = Button(root, text ='Old File', command = open_Master)
btn2.pack(side='top')
btn3 = Button(root, text ='Fix', command = delcolumn)
btn3.pack(side='top')
btn4 = Button(root, text ='Save New File', command = save_fileNew)
btn4.pack(side='top')
root.mainloop()
